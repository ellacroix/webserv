!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALRDY_SET_ERROR	ConfigParser.hpp	/^	ALRDY_SET_ERROR,$/;"	e	enum:arguments
ARG_ERROR	ConfigParser.hpp	/^	ARG_ERROR,$/;"	e	enum:arguments
AUTOINDEX	ConfigParser.hpp	/^	AUTOINDEX,$/;"	e	enum:directives
BODY	Request.hpp	/^	BODY,$/;"	e	enum:e_parsing_steps
BODY_SIZE	ConfigParser.hpp	/^	BODY_SIZE,$/;"	e	enum:arguments
CLIENT_HPP	Client.hpp	2;"	d
CLIENT_MAX_BODY_SIZE	ConfigParser.hpp	/^	CLIENT_MAX_BODY_SIZE,$/;"	e	enum:directives
CLOSING_BRACKET	ConfigParser.hpp	/^	CLOSING_BRACKET,$/;"	e	enum:directives
COMPLETE	Request.hpp	/^	COMPLETE$/;"	e	enum:e_parsing_steps
CONFIG_PARSER_HPP	ConfigParser.hpp	2;"	d
CONTENT_LENGTH	Request.hpp	/^	CONTENT_LENGTH$/;"	e	enum:e_supported_headers
Client	Client.hpp	/^		Client() {};$/;"	f	class:Client
Client	Client.hpp	/^class Client{$/;"	c
ConfigParser	ConfigParser.hpp	/^class	ConfigParser {$/;"	c
DIR_ERROR	ConfigParser.hpp	/^	DIR_ERROR = -1,$/;"	e	enum:directives
DOMAIN	ConfigParser.hpp	/^	DOMAIN,$/;"	e	enum:arguments
ERROR_PAGE	ConfigParser.hpp	/^	ERROR_PAGE,$/;"	e	enum:directives
FAILURE	webserv.hpp	44;"	d
FILE_EXTENSION	ConfigParser.hpp	/^	FILE_EXTENSION$/;"	e	enum:arguments
FILE_NAME	ConfigParser.hpp	/^	FILE_NAME,$/;"	e	enum:arguments
HEADERS	Request.hpp	/^	HEADERS,$/;"	e	enum:e_parsing_steps
HOST	Request.hpp	/^	HOST,	$/;"	e	enum:e_supported_headers
HTTP_CODE	ConfigParser.hpp	/^	HTTP_CODE,$/;"	e	enum:arguments
INDEX	ConfigParser.hpp	/^	INDEX,$/;"	e	enum:directives
IP	ConfigParser.hpp	/^	IP,$/;"	e	enum:arguments
K	webserv.hpp	48;"	d
LIMIT_EXCEPT	ConfigParser.hpp	/^	LIMIT_EXCEPT,$/;"	e	enum:directives
LISTEN	ConfigParser.hpp	/^	LISTEN,$/;"	e	enum:directives
LOCATION	ConfigParser.hpp	/^	LOCATION,$/;"	e	enum:directives
LOCATION_CONTEXT	ConfigParser.hpp	/^	LOCATION_CONTEXT\/\/,$/;"	e	enum:contexts
LOCATION_HPP	Location.hpp	2;"	d
LOC_BLCK_ERROR	ConfigParser.hpp	/^	LOC_BLCK_ERROR,$/;"	e	enum:arguments
Location	Location.hpp	/^class	Location$/;"	c
M	webserv.hpp	49;"	d
MAIN_CONTEXT	ConfigParser.hpp	/^	MAIN_CONTEXT = 0,$/;"	e	enum:contexts
NOT_SUPPORTED_HEADER	Request.hpp	/^	NOT_SUPPORTED_HEADER = -1,$/;"	e	enum:e_supported_headers
N_CONTEXTS	ConfigParser.hpp	10;"	d
N_DIR	ConfigParser.hpp	9;"	d
N_SUPPORTED_HEADERS	Request.hpp	18;"	d
ON_OFF	ConfigParser.hpp	/^	ON_OFF,$/;"	e	enum:arguments
OPENING_BRACKET	ConfigParser.hpp	/^	OPENING_BRACKET,$/;"	e	enum:directives
PATH	ConfigParser.hpp	/^	PATH,$/;"	e	enum:arguments
PORT	ConfigParser.hpp	/^	PORT,$/;"	e	enum:arguments
PORT_HPP	Port.hpp	2;"	d
Port	Port.hpp	/^class	Port {$/;"	c
RECV_BUFFER_SIZE	webserv.hpp	45;"	d
REQUEST_HPP	Request.hpp	2;"	d
REQUEST_LINE	Request.hpp	/^	REQUEST_LINE,$/;"	e	enum:e_parsing_steps
REQ_ERROR	Request.hpp	/^	REQ_ERROR = -1,$/;"	e	enum:e_parsing_steps
RESPONSE_HPP	Response.hpp	2;"	d
RETURN	ConfigParser.hpp	/^	RETURN,	\/\/ PASS return DIRECTIVE AS LOCATION CONTEXT ONLY ?$/;"	e	enum:directives
ROOT	ConfigParser.hpp	/^	ROOT,$/;"	e	enum:directives
Request	Request.hpp	/^		Request(void) {};$/;"	f	class:Request
Request	Request.hpp	/^class   Request {$/;"	c
Response	Response.hpp	/^	Response() {};$/;"	f	class:Response
Response	Response.hpp	/^class Response {$/;"	c
SERVER	ConfigParser.hpp	/^	SERVER,$/;"	e	enum:directives
SERVER_CONTEXT	ConfigParser.hpp	/^	SERVER_CONTEXT,$/;"	e	enum:contexts
SERVER_MAX_BODY_SIZE	webserv.hpp	50;"	d
SERVER_MAX_HEADERS_SIZE	webserv.hpp	51;"	d
SERVER_NAME	ConfigParser.hpp	/^	SERVER_NAME,$/;"	e	enum:directives
SERV_BLCK_ERROR	ConfigParser.hpp	/^	SERV_BLCK_ERROR = -4,$/;"	e	enum:arguments
SUCCESS	webserv.hpp	43;"	d
THREADS	webserv.hpp	46;"	d
TIMEOUT	webserv.hpp	47;"	d
TRANSFER_ENCODING	Request.hpp	/^	TRANSFER_ENCODING,$/;"	e	enum:e_supported_headers
URI	ConfigParser.hpp	/^	URI,$/;"	e	enum:arguments
VIRTUAL_SERVER_HPP	VirtualServer.hpp	2;"	d
VirtualServer	VirtualServer.hpp	/^class	VirtualServer {$/;"	c
WEBSERV_HPP	webserv.hpp	2;"	d
_URI	Request.hpp	/^		std::string			_URI;$/;"	m	class:Request
_VS_list	Port.hpp	/^		std::list<VirtualServer*>		_VS_list;$/;"	m	class:Port
_autoIndex	Location.hpp	/^		bool								_autoIndex;$/;"	m	class:Location
_autoIndexIsSet	Location.hpp	/^		bool								_autoIndexIsSet;$/;"	m	class:Location
_body	Request.hpp	/^		std::string			_body;$/;"	m	class:Request
_body_length	Request.hpp	/^		ssize_t				_body_length;$/;"	m	class:Request
_chunked	Request.hpp	/^		bool				_chunked;$/;"	m	class:Request
_client	Request.hpp	/^		Client				*_client;$/;"	m	class:Request
_client_max_body_size	VirtualServer.hpp	/^		ssize_t								_client_max_body_size;$/;"	m	class:VirtualServer
_client_max_body_size_is_set	VirtualServer.hpp	/^		bool		_client_max_body_size_is_set;$/;"	m	class:VirtualServer
_clients_map	Port.hpp	/^		std::map<int, Client*>			_clients_map;$/;"	m	class:Port
_content_length	Request.hpp	/^		ssize_t				_content_length;$/;"	m	class:Request
_context	ConfigParser.hpp	/^		int											_context;$/;"	m	class:ConfigParser
_contexts	ConfigParser.hpp	/^		static const char *							_contexts[N_CONTEXTS];$/;"	m	class:ConfigParser
_cur_line	ConfigParser.hpp	/^		std::string									_cur_line;$/;"	m	class:ConfigParser
_cur_line	Request.hpp	/^		std::string			_cur_line;$/;"	m	class:Request
_curLoc	ConfigParser.hpp	/^		Location									*_curLoc;$/;"	m	class:ConfigParser
_curVS	ConfigParser.hpp	/^		VirtualServer								*_curVS;$/;"	m	class:ConfigParser
_defLoc	ConfigParser.hpp	/^		Location									_defLoc;$/;"	m	class:ConfigParser
_defLocPtr	ConfigParser.hpp	/^		Location									*_defLocPtr;$/;"	m	class:ConfigParser
_dir	ConfigParser.hpp	/^		int											_dir;$/;"	m	class:ConfigParser
_directives	ConfigParser.hpp	/^		static const char *							_directives[N_DIR];$/;"	m	class:ConfigParser
_double_CRLF_pos	Request.hpp	/^		size_t				_double_CRLF_pos;$/;"	m	class:Request
_error_page	VirtualServer.hpp	/^		std::map<int, std::string>          _error_page;$/;"	m	class:VirtualServer
_error_page_is_set	VirtualServer.hpp	/^		bool		_error_page_is_set;$/;"	m	class:VirtualServer
_has_body	Request.hpp	/^		bool				_has_body;$/;"	m	class:Request
_header_alrdy_set	Request.hpp	/^		bool				_header_alrdy_set[N_SUPPORTED_HEADERS];$/;"	m	class:Request
_headers	Request.hpp	/^		std::string			_headers;$/;"	m	class:Request
_host	Request.hpp	/^		std::string			_host;$/;"	m	class:Request
_i	Request.hpp	/^		size_t				_i;$/;"	m	class:Request
_ifs	ConfigParser.hpp	/^		std::ifstream								_ifs;$/;"	m	class:ConfigParser
_index	Location.hpp	/^		std::vector<std::string>			_index; \/\/ IF MANY INDEXES$/;"	m	class:Location
_indexIsSet	Location.hpp	/^		bool								_indexIsSet;$/;"	m	class:Location
_limitExcept	Location.hpp	/^		std::vector<std::string>			_limitExcept; \/\/ STRINGS$/;"	m	class:Location
_limitExceptIsSet	Location.hpp	/^		bool								_limitExceptIsSet;$/;"	m	class:Location
_line	ConfigParser.hpp	/^		std::vector<std::string>					_line;$/;"	m	class:ConfigParser
_lineN	ConfigParser.hpp	/^		int											_lineN;$/;"	m	class:ConfigParser
_lines	ConfigParser.hpp	/^		std::vector<std:: vector<std::string > >	_lines;$/;"	m	class:ConfigParser
_listen_port	VirtualServer.hpp	/^		int									_listen_port;$/;"	m	class:VirtualServer
_listen_port_is_set	VirtualServer.hpp	/^		bool		_listen_port_is_set;$/;"	m	class:VirtualServer
_location_is_set	VirtualServer.hpp	/^		bool		_location_is_set;$/;"	m	class:VirtualServer
_location_map	VirtualServer.hpp	/^		std::map<std::string, Location*>	_location_map;$/;"	m	class:VirtualServer
_method	Request.hpp	/^		std::string			_method;$/;"	m	class:Request
_next_lineI	Request.hpp	/^		size_t				_next_lineI;$/;"	m	class:Request
_parsing_step	Request.hpp	/^		int					_parsing_step;$/;"	m	class:Request
_ports_list	ConfigParser.hpp	/^		std::list<Port*>							_ports_list;$/;"	m	class:ConfigParser
_portsMap	ConfigParser.hpp	/^		std::map<int, Port>							_portsMap;$/;"	m	class:ConfigParser
_prefix	Location.hpp	/^		std::string							_prefix;$/;"	m	class:Location
_returnCode	Location.hpp	/^		int									_returnCode;$/;"	m	class:Location
_returnIsSet	Location.hpp	/^		bool								_returnIsSet;$/;"	m	class:Location
_returnUri	Location.hpp	/^		std::string							_returnUri;$/;"	m	class:Location
_root	Location.hpp	/^		std::string							_root;$/;"	m	class:Location
_rootIsSet	Location.hpp	/^		bool								_rootIsSet;$/;"	m	class:Location
_server_name	VirtualServer.hpp	/^		std::vector<std::string>			_server_name; \/\/ IF MANY NAMES$/;"	m	class:VirtualServer
_server_name_is_set	VirtualServer.hpp	/^		bool		_server_name_is_set;$/;"	m	class:VirtualServer
_status_code	Request.hpp	/^		unsigned int		_status_code;$/;"	m	class:Request
_supported_headers	Request.hpp	/^		static const char *	_supported_headers[N_SUPPORTED_HEADERS];$/;"	m	class:Request
_tmpLoc	ConfigParser.hpp	/^		Location									_tmpLoc;$/;"	m	class:ConfigParser
_tmpVS	ConfigParser.hpp	/^		VirtualServer								_tmpVS;$/;"	m	class:ConfigParser
_transfer_encoding	Request.hpp	/^		std::string			_transfer_encoding;$/;"	m	class:Request
_virtual_server	Request.hpp	/^		VirtualServer       *_virtual_server;$/;"	m	class:Request
addr_len	Port.hpp	/^		int 				addr_len;$/;"	m	class:Port
arguments	ConfigParser.hpp	/^enum	arguments$/;"	g
body	Response.hpp	/^	std::string		body;$/;"	m	class:Response
client	Response.hpp	/^	Client			*client;$/;"	m	class:Response
client_mutex	Client.hpp	/^		pthread_mutex_t		client_mutex;$/;"	m	class:Client
condition_var	webserv.hpp	/^	pthread_cond_t		condition_var;$/;"	m	struct:s_thread_info
connected	Client.hpp	/^		bool				connected;$/;"	m	class:Client
contexts	ConfigParser.hpp	/^enum	contexts$/;"	g
directives	ConfigParser.hpp	/^enum	directives$/;"	g
e_parsing_steps	Request.hpp	/^enum    e_parsing_steps$/;"	g
e_supported_headers	Request.hpp	/^enum	e_supported_headers$/;"	g
epoll_fd	webserv.hpp	/^	int					*epoll_fd;$/;"	m	struct:s_thread_info
epoll_fd_mutex	webserv.hpp	/^	pthread_mutex_t		epoll_fd_mutex;$/;"	m	struct:s_thread_info
event	webserv.hpp	/^	struct epoll_event	event;$/;"	m	struct:s_thread_info	typeref:struct:s_thread_info::epoll_event
kill_port	Port.hpp	/^		bool				kill_port;$/;"	m	class:Port
last_activity	Client.hpp	/^		struct timeval		last_activity;$/;"	m	class:Client	typeref:struct:Client::timeval
listen_socket	Port.hpp	/^		int					listen_socket;$/;"	m	class:Port
location	Response.hpp	/^	Location		*location;$/;"	m	class:Response
location_header	Response.hpp	/^	std::string		location_header;$/;"	m	class:Response
max_sd	Port.hpp	/^		int					max_sd;$/;"	m	class:Port
on	Port.hpp	/^		int					ret, on;$/;"	m	class:Port
opened	Port.hpp	/^		bool				opened;$/;"	m	class:Port
parent_port	Client.hpp	/^		Port				*parent_port;$/;"	m	class:Client
path	Response.hpp	/^	std::string		path;$/;"	m	class:Response
port_number	Port.hpp	/^		int					port_number;$/;"	m	class:Port
queue	webserv.hpp	/^	std::deque<Client*> *queue;$/;"	m	struct:s_thread_info
queue_mutex	webserv.hpp	/^	pthread_mutex_t		queue_mutex;$/;"	m	struct:s_thread_info
raw_response	Response.hpp	/^	std::string		raw_response;$/;"	m	class:Response
read_more	Client.hpp	/^		bool				read_more;$/;"	m	class:Client
request	Client.hpp	/^		Request				*request;$/;"	m	class:Client
request	Response.hpp	/^	Request			*request;$/;"	m	class:Response
request_buffer	Client.hpp	/^		std::string			request_buffer;$/;"	m	class:Client
response	Client.hpp	/^		Response			*response;$/;"	m	class:Client
response_ready	Client.hpp	/^		bool				response_ready;$/;"	m	class:Client
ret	Port.hpp	/^		int					ret, on;$/;"	m	class:Port
s_thread_info	webserv.hpp	/^typedef struct	s_thread_info$/;"	s
server_address	Port.hpp	/^		struct sockaddr_in	server_address;$/;"	m	class:Port	typeref:struct:Port::sockaddr_in
status_code	Client.hpp	/^		int					status_code;$/;"	m	class:Client
status_code	Response.hpp	/^	int				status_code;$/;"	m	class:Response
stream_socket	Client.hpp	/^		int					stream_socket;$/;"	m	class:Client
t_VS_listCIt	webserv.hpp	/^typedef std::list<VirtualServer*>::const_iterator	t_VS_listCIt;$/;"	t
t_VS_listIt	webserv.hpp	/^typedef std::list<VirtualServer*>::iterator			t_VS_listIt;$/;"	t
t_clientMapIt	webserv.hpp	/^typedef	std::map<int, Client*>::iterator			t_clientMapIt;$/;"	t
t_portListIt	webserv.hpp	/^typedef	std::list<Port*>::iterator					t_portListIt;$/;"	t
t_thread_info	webserv.hpp	/^}				t_thread_info;$/;"	t	typeref:struct:s_thread_info
virtual_server	Response.hpp	/^	VirtualServer	*virtual_server;$/;"	m	class:Response
~Request	Request.hpp	/^		~Request(void) {};$/;"	f	class:Request
~Response	Response.hpp	/^	~Response() {};$/;"	f	class:Response
