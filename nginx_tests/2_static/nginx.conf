
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
error_log  /dev/stderr notice;
pid        /var/run/nginx.pid;

events {
	worker_connections 1024 ;
}

http {

	index index.html index2.html ;

	log_format  main
		'$remote_addr - $remote_user [$time_local] "$request" '
		'$status $body_bytes_sent "$http_referer" '
		'"$http_user_agent" "$http_x_forwarded_for"';

	log_format bodylog escape=none
		'[$time_local] \n'
		'[========== REQUEST ========== ] \n$request\n'
		'[== REQUEST HEADERS] \n$req_headers'
		'[== REQUEST BODY] \n$req_body \n'
		'[========== RESPONSE ========= ] \n$status\n'
		'[== RESPONSE HEADERS] \n$resp_header'
		'[== RESPONSE BODY] \n$resp_body\n\n';

	server {
		access_log /var/log/nginx/access.log bodylog;
		access_log /dev/stdout bodylog;

		listen	9000 ;

		server_name daga.net booga.net ;

		location / {
			root /data/www ;
		}
		location /images/ {
			root /data/ ;
		}
#		error_page 405 =200 $uri;


#=================================================
#=================================================
#=================================================

		lua_need_request_body on;

		set $resp_body "";
		set $req_body "";
		set $req_headers "";
		set $resp_header "";

		client_body_buffer_size 16k;
		client_max_body_size 16k;

		rewrite_by_lua_block {
			local req_h = "";
			ngx.var.req_body = ngx.req.get_body_data();
			local h, err = ngx.req.get_headers()
			for k, v in pairs(h) do
				req_h = req_h .. k .. ": " .. v .. "\n";
			end
			ngx.var.req_headers = req_h;
		}
	}

	body_filter_by_lua '
		local resp_body = string.sub(ngx.arg[1], 1, 1000)
		ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
		if ngx.arg[2] then
			ngx.var.resp_body = ngx.ctx.buffered
				end
				';
	header_filter_by_lua_block { 
		local resp_header = "";
		local rh, err = ngx.resp.get_headers();
		for k, v in pairs(rh) do
			resp_header = resp_header .. k..": "..v.."\n";
		end
			ngx.var.resp_header = resp_header;
	}
}
